// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId     String             @id @default(uuid())
  password   String
  email String
  point      Int
  profile    String?
  name       String?
  hostEvents     Event[]         @relation("UserHosts")
  reservations Reservation[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  sns       sns[]
  badges    UserBadge[]
}

model Event {
  eventId      Int             @id @default(autoincrement())
  hostId       String
  host         User            @relation("UserHosts", fields: [hostId], references: [userId])
  eventName    String
  title        String
  description  String
  createdAt    DateTime        @default(now())
  startsAt     DateTime
  endsAt       DateTime
  isDeleted    Boolean         @default(false)
  updatedAt    DateTime        @updatedAt
  timeSlots   TimeSlot[]

  badgeId      Int?            @unique      // ← 外部キー（1対1用）
  badge        badgeList?      @relation(fields: [badgeId], references: [badgeId])


  @@map("event_table") // DB上のテーブル名を "event_table" にする
}


model TimeSlot {
  timeSlotId Int       @id @default(autoincrement())
  eventId    Int
  startAt    DateTime
  endAt      DateTime
  capacity   Int

  event         Event         @relation(fields: [eventId], references: [eventId])
  reservations  Reservation[]
}


model Reservation {
  reservationId Int      @id @default(autoincrement())
  userId        String
  timeSlotId    Int
  status        ReservationStatus
  reservedAt    DateTime @default(now())
  canceledAt    DateTime?

  user     User      @relation(fields: [userId], references: [userId])
  timeSlot TimeSlot  @relation(fields: [timeSlotId], references: [timeSlotId])

  @@unique([userId, timeSlotId])
}

enum ReservationStatus {
  RESERVED
  CANCELED
}

model sns {
  postId     Int      @id @default(autoincrement())
  userId     String
  maker       User     @relation(fields: [userId], references: [userId])
  content    String
  good       String[] // goodを誰がしたかの配列
  time       DateTime @default(now())
}

model badgeList {
  badgeId     Int        @id @default(autoincrement())
  name        String
  description String
  image       String

  users       UserBadge[]
  event       Event?     // ← 1対1の逆側（optional にしておくと安全）
}

model UserBadge {
  id       Int         @id @default(autoincrement())
  userId   String
  badgeId  Int

  user     User        @relation(fields: [userId], references: [userId])
  badge    badgeList   @relation(fields: [badgeId], references: [badgeId])

  @@unique([userId, badgeId])
}